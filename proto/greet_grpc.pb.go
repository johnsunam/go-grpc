// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreenService_SayHello_FullMethodName                       = "/greet_service.GreenService/SayHello"
	GreenService_SayHelloServerStreaming_FullMethodName        = "/greet_service.GreenService/SayHelloServerStreaming"
	GreenService_SayHelloClientStreaming_FullMethodName        = "/greet_service.GreenService/SayHelloClientStreaming"
	GreenService_SayHelloBidirectionalStreaming_FullMethodName = "/greet_service.GreenService/SayHelloBidirectionalStreaming"
)

// GreenServiceClient is the client API for GreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreenServiceClient interface {
	SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStreaming(ctx context.Context, in *NameList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NameList, MessageList], error)
	SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NameList, HelloResponse], error)
}

type greenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreenServiceClient(cc grpc.ClientConnInterface) GreenServiceClient {
	return &greenServiceClient{cc}
}

func (c *greenServiceClient) SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GreenService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenServiceClient) SayHelloServerStreaming(ctx context.Context, in *NameList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreenService_ServiceDesc.Streams[0], GreenService_SayHelloServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NameList, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloServerStreamingClient = grpc.ServerStreamingClient[HelloResponse]

func (c *greenServiceClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NameList, MessageList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreenService_ServiceDesc.Streams[1], GreenService_SayHelloClientStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NameList, MessageList]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloClientStreamingClient = grpc.ClientStreamingClient[NameList, MessageList]

func (c *greenServiceClient) SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NameList, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreenService_ServiceDesc.Streams[2], GreenService_SayHelloBidirectionalStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NameList, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloBidirectionalStreamingClient = grpc.BidiStreamingClient[NameList, HelloResponse]

// GreenServiceServer is the server API for GreenService service.
// All implementations must embed UnimplementedGreenServiceServer
// for forward compatibility.
type GreenServiceServer interface {
	SayHello(context.Context, *NoParam) (*HelloResponse, error)
	SayHelloServerStreaming(*NameList, grpc.ServerStreamingServer[HelloResponse]) error
	SayHelloClientStreaming(grpc.ClientStreamingServer[NameList, MessageList]) error
	SayHelloBidirectionalStreaming(grpc.BidiStreamingServer[NameList, HelloResponse]) error
	mustEmbedUnimplementedGreenServiceServer()
}

// UnimplementedGreenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreenServiceServer struct{}

func (UnimplementedGreenServiceServer) SayHello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreenServiceServer) SayHelloServerStreaming(*NameList, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedGreenServiceServer) SayHelloClientStreaming(grpc.ClientStreamingServer[NameList, MessageList]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (UnimplementedGreenServiceServer) SayHelloBidirectionalStreaming(grpc.BidiStreamingServer[NameList, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStreaming not implemented")
}
func (UnimplementedGreenServiceServer) mustEmbedUnimplementedGreenServiceServer() {}
func (UnimplementedGreenServiceServer) testEmbeddedByValue()                      {}

// UnsafeGreenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreenServiceServer will
// result in compilation errors.
type UnsafeGreenServiceServer interface {
	mustEmbedUnimplementedGreenServiceServer()
}

func RegisterGreenServiceServer(s grpc.ServiceRegistrar, srv GreenServiceServer) {
	// If the following call pancis, it indicates UnimplementedGreenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreenService_ServiceDesc, srv)
}

func _GreenService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreenService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenServiceServer).SayHello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreenService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NameList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreenServiceServer).SayHelloServerStreaming(m, &grpc.GenericServerStream[NameList, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloServerStreamingServer = grpc.ServerStreamingServer[HelloResponse]

func _GreenService_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreenServiceServer).SayHelloClientStreaming(&grpc.GenericServerStream[NameList, MessageList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloClientStreamingServer = grpc.ClientStreamingServer[NameList, MessageList]

func _GreenService_SayHelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreenServiceServer).SayHelloBidirectionalStreaming(&grpc.GenericServerStream[NameList, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreenService_SayHelloBidirectionalStreamingServer = grpc.BidiStreamingServer[NameList, HelloResponse]

// GreenService_ServiceDesc is the grpc.ServiceDesc for GreenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreenService",
	HandlerType: (*GreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GreenService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _GreenService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _GreenService_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStreaming",
			Handler:       _GreenService_SayHelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
